datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

enum Role {
  USER
  ADMIN
  STUDENT
  TEACHER
  PRINCIPAL
}

enum Gender {
  UNKOWN
  MALE
  FEMALE
  OTHER
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  verified      Boolean?  @default(false)
  lastname      String?
  image         String?

  password String?
  gender   Gender  @default(UNKOWN)

  role    Role    @default(STUDENT)
  school  School? @relation(name: "SchoolUser", fields: [schoolId], references: [id])
  team    Team?   @relation(name: "TeamMembers", fields: [teamId], references: [id])
  teaches Team[]  @relation("Teacher")

  schoolId  Int?
  teamId    Int?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  ballots     Ballot[]
  attachments Attachment[]
  threads     Thread[]
  reactions   Reaction[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Team {
  id        Int      @default(autoincrement()) @id
  name      String
  school    School   @relation(name: "SchoolTeam", fields: [schoolId], references: [id])
  schoolId  Int
  teacher   User     @relation(name: "Teacher", fields: [teacherId], references: [id])
  teacherId Int
  members   User[]   @relation("TeamMembers")
  ballots   Ballot[]
  invite    String?  @unique
  domain    Domain?  @relation(fields: [domainId], references: [id])
  domainId  Int?

  @@map(name: "teams")
}

model School {
  id       Int      @default(autoincrement()) @id
  name     String
  domain   Domain?  @relation(fields: [domainId], references: [id])
  city     String   @default("")
  canton   String   @default("")
  zip      String   @default("")
  address  String   @default("")
  domainId Int?
  members  User[]   @relation("SchoolUser")
  teams    Team[]   @relation("SchoolTeam")
  ballots  Ballot[]

  @@map(name: "schools")
}

model Domain {
  id       Int      @default(autoincrement()) @id
  name     String   @unique
  approved Boolean  @default(false)
  schools  School[]
  Team     Team[]

  @@map(name: "domains")
}

enum Scope {
  PUBLIC // Open ballot
  NATIONAL // Official national ballots
  CANTONAL // Official canontal ballots
  SCHOOL // School ballots
  TEAM // class ballots
}

model Ballot {
  id          Int      @default(autoincrement()) @id
  title       String
  description String
  start       DateTime
  end         DateTime

  attachments Attachment[]
  scope       Scope        @default(PUBLIC)
  canton      String?
  school      School?      @relation(fields: [schoolId], references: [id])
  schoolId    Int?
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      Int?
  creator     User         @relation(fields: [creatorId], references: [id])
  creatorId   Int
  thread      Thread?      @relation(fields: [threadId], references: [id])
  threadId    Int?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "ballots")
}

model Attachment {
  id       Int     @default(autoincrement()) @id
  file     String
  title    String  @default("")
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  ballot   Ballot? @relation(fields: [ballotId], references: [id])
  ballotId Int?
  thread   Thread? @relation(fields: [threadId], references: [id])
  threadId Int?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "attachments")
}

model Thread {
  id       Int     @default(autoincrement()) @id
  title    String  @default("")
  text     String  @default("")
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  parent   Thread? @relation(fields: [parentId], references: [id])
  parentId Int?

  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @default(now()) @map(name: "updated_at")
  ballot      Ballot?
  children    Thread[]     @relation("ThreadToThread")
  reactions   Reaction[]
  attachments Attachment[]

  @@map(name: "threads")
}

model Reaction {
  id        Int      @default(autoincrement()) @id
  emoij     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  thread    Thread?  @relation(fields: [threadId], references: [id])
  threadId  Int?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "reactions")
}
